{
  "statistics": {
    "detectionDate": "2025-08-13T14:41:09.518Z",
    "formats": {
      "typescript": {
        "sources": {
          "/workspace/backend/web/static/utils/uiComponents.ts": {
            "lines": 263,
            "tokens": 2118,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/web/static/utils/translationUtils.ts": {
            "lines": 140,
            "tokens": 1064,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/web/static/utils/translationUtils.d.ts": {
            "lines": 7,
            "tokens": 100,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/web/static/utils/languageSelector.ts": {
            "lines": 113,
            "tokens": 886,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/web/static/utils/colorUtils.ts": {
            "lines": 97,
            "tokens": 643,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/web/static/utils/apiUtils.ts": {
            "lines": 134,
            "tokens": 781,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 42,
            "duplicatedTokens": 483,
            "percentage": 31.34,
            "percentageTokens": 61.84,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/web/static/uiUtils.ts": {
            "lines": 357,
            "tokens": 3163,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 8,
            "duplicatedTokens": 104,
            "percentage": 2.24,
            "percentageTokens": 3.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/web/static/translations.ts": {
            "lines": 249,
            "tokens": 1480,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/web/static/mapRenderer.ts": {
            "lines": 56,
            "tokens": 643,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/web/static/controls.ts": {
            "lines": 80,
            "tokens": 800,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 10,
            "duplicatedTokens": 126,
            "percentage": 12.5,
            "percentageTokens": 15.75,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/web/static/cityOverlays.ts": {
            "lines": 306,
            "tokens": 1716,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 28,
            "duplicatedTokens": 220,
            "percentage": 9.15,
            "percentageTokens": 12.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/web/static/cityOverlay.ts": {
            "lines": 330,
            "tokens": 2288,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 22,
            "duplicatedTokens": 210,
            "percentage": 6.67,
            "percentageTokens": 9.18,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/web/static/api.ts": {
            "lines": 240,
            "tokens": 2366,
            "sources": 1,
            "clones": 17,
            "duplicatedLines": 116,
            "duplicatedTokens": 1245,
            "percentage": 48.33,
            "percentageTokens": 52.62,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/electron/src/preload.ts": {
            "lines": 8,
            "tokens": 51,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/electron/src/main.ts": {
            "lines": 193,
            "tokens": 1403,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 2573,
          "tokens": 19502,
          "sources": 15,
          "clones": 18,
          "duplicatedLines": 113,
          "duplicatedTokens": 1194,
          "percentage": 4.39,
          "percentageTokens": 6.12,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "python": {
        "sources": {
          "/workspace/backend/utils/tavern_generator.py": {
            "lines": 66,
            "tokens": 445,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/settlement_generator.py": {
            "lines": 113,
            "tokens": 496,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/settlement_data_creator.py": {
            "lines": 63,
            "tokens": 429,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/response_helpers.py": {
            "lines": 112,
            "tokens": 487,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 114,
            "percentage": 17.86,
            "percentageTokens": 23.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/npc_generator.py": {
            "lines": 152,
            "tokens": 1318,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 18,
            "duplicatedTokens": 194,
            "percentage": 11.84,
            "percentageTokens": 14.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/markdown_parser.py": {
            "lines": 136,
            "tokens": 829,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 17,
            "duplicatedTokens": 73,
            "percentage": 12.5,
            "percentageTokens": 8.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/markdown_formatter.py": {
            "lines": 166,
            "tokens": 1152,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 108,
            "percentage": 12.05,
            "percentageTokens": 9.38,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/loot_generator.py": {
            "lines": 131,
            "tokens": 880,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/hex_field_creator.py": {
            "lines": 62,
            "tokens": 402,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/grid_generator.py": {
            "lines": 155,
            "tokens": 755,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/database_categories.py": {
            "lines": 135,
            "tokens": 921,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 218,
            "percentage": 14.81,
            "percentageTokens": 23.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/core_utils.py": {
            "lines": 183,
            "tokens": 1714,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 166,
            "duplicatedTokens": 1642,
            "percentage": 90.71,
            "percentageTokens": 95.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/content_parser.py": {
            "lines": 126,
            "tokens": 636,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 17,
            "duplicatedTokens": 73,
            "percentage": 13.49,
            "percentageTokens": 11.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/content_detector.py": {
            "lines": 96,
            "tokens": 464,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 14,
            "duplicatedTokens": 126,
            "percentage": 14.58,
            "percentageTokens": 27.16,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/city_processor.py": {
            "lines": 52,
            "tokens": 302,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/city_helpers.py": {
            "lines": 76,
            "tokens": 445,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/beast_generator.py": {
            "lines": 100,
            "tokens": 677,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 8,
            "duplicatedTokens": 94,
            "percentage": 8,
            "percentageTokens": 13.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/ascii_processor.py": {
            "lines": 198,
            "tokens": 1252,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 136,
            "percentage": 9.09,
            "percentageTokens": 10.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/__init__.py": {
            "lines": 204,
            "tokens": 730,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils.py": {
            "lines": 183,
            "tokens": 1714,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 166,
            "duplicatedTokens": 1642,
            "percentage": 90.71,
            "percentageTokens": 95.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/translation_system.py": {
            "lines": 342,
            "tokens": 2146,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/terrain_system.py": {
            "lines": 260,
            "tokens": 2396,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 14,
            "duplicatedTokens": 214,
            "percentage": 5.38,
            "percentageTokens": 8.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/run.py": {
            "lines": 11,
            "tokens": 40,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/mork_borg_lore_database.py": {
            "lines": 766,
            "tokens": 3942,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/models.py": {
            "lines": 55,
            "tokens": 304,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/image_analyzer.py": {
            "lines": 269,
            "tokens": 3779,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 12,
            "duplicatedTokens": 184,
            "percentage": 4.46,
            "percentageTokens": 4.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/hex_model.py": {
            "lines": 427,
            "tokens": 3448,
            "sources": 1,
            "clones": 12,
            "duplicatedLines": 72,
            "duplicatedTokens": 772,
            "percentage": 16.86,
            "percentageTokens": 22.39,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/generation_engine.py": {
            "lines": 539,
            "tokens": 4339,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/database_manager.py": {
            "lines": 365,
            "tokens": 3367,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 24,
            "duplicatedTokens": 280,
            "percentage": 6.58,
            "percentageTokens": 8.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/config.py": {
            "lines": 180,
            "tokens": 1695,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/app.py": {
            "lines": 40,
            "tokens": 212,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/__init__.py": {
            "lines": 47,
            "tokens": 358,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 5810,
          "tokens": 42074,
          "sources": 32,
          "clones": 22,
          "duplicatedLines": 303,
          "duplicatedTokens": 2935,
          "percentage": 5.22,
          "percentageTokens": 6.98,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      }
    },
    "total": {
      "lines": 8383,
      "tokens": 61576,
      "sources": 47,
      "clones": 40,
      "duplicatedLines": 416,
      "duplicatedTokens": 4129,
      "percentage": 4.96,
      "percentageTokens": 6.71,
      "newDuplicatedLines": 0,
      "newClones": 0
    }
  },
  "duplicates": [
    {
      "format": "typescript",
      "lines": 5,
      "fragment": ";\n  const svgContainer = document.getElementById('svgContainer') as SVGElement | null;\n  const svgGroup = svgContainer?.querySelector('g') as SVGElement | null;\n  \n  console",
      "tokens": 0,
      "firstFile": {
        "name": "backend/web/static/uiUtils.ts",
        "start": 35,
        "end": 39,
        "startLoc": {
          "line": 35,
          "column": 2,
          "position": 337
        },
        "endLoc": {
          "line": 39,
          "column": 8,
          "position": 389
        }
      },
      "secondFile": {
        "name": "backend/web/static/uiUtils.ts",
        "start": 18,
        "end": 23,
        "startLoc": {
          "line": 18,
          "column": 7,
          "position": 188
        },
        "endLoc": {
          "line": 23,
          "column": 3,
          "position": 242
        }
      }
    },
    {
      "format": "typescript",
      "lines": 6,
      "fragment": ");\n        await clearServiceWorkerCaches();\n        window.location.replace('/?t=' + Date.now());\n      } catch (e: any) {\n        ui.hideLoading();\n        ui.showNotification(e.message || 'Failed to change language'",
      "tokens": 0,
      "firstFile": {
        "name": "backend/web/static/controls.ts",
        "start": 72,
        "end": 77,
        "startLoc": {
          "line": 72,
          "column": 5,
          "position": 719
        },
        "endLoc": {
          "line": 77,
          "column": 28,
          "position": 782
        }
      },
      "secondFile": {
        "name": "backend/web/static/controls.ts",
        "start": 50,
        "end": 55,
        "startLoc": {
          "line": 50,
          "column": 2,
          "position": 514
        },
        "endLoc": {
          "line": 55,
          "column": 28,
          "position": 577
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "const mapContainer = document.querySelector(\".map-container\")\n    const mapZoomContainer = document.getElementById(\"map-zoom-container\")\n    if (!mapContainer || !mapZoomContainer) {\n      throw new Error(\"Map container or zoom container not found\")\n    }\n\n    const",
      "tokens": 0,
      "firstFile": {
        "name": "backend/web/static/cityOverlays.ts",
        "start": 86,
        "end": 92,
        "startLoc": {
          "line": 86,
          "column": 5,
          "position": 595
        },
        "endLoc": {
          "line": 92,
          "column": 6,
          "position": 652
        }
      },
      "secondFile": {
        "name": "backend/web/static/cityOverlays.ts",
        "start": 29,
        "end": 36,
        "startLoc": {
          "line": 29,
          "column": 5,
          "position": 167
        },
        "endLoc": {
          "line": 36,
          "column": 46,
          "position": 225
        }
      }
    },
    {
      "format": "typescript",
      "lines": 9,
      "fragment": ";\n      app.updateWorldMapControlsVisibility();\n      app.updateDistrictButtonsVisibility();\n      app.initializeEventListeners();\n    }\n\n    ui.hideLoading()\n  } catch (error) {\n    console.error(\"Error loading ASCII view:\"",
      "tokens": 0,
      "firstFile": {
        "name": "backend/web/static/cityOverlays.ts",
        "start": 97,
        "end": 105,
        "startLoc": {
          "line": 97,
          "column": 7,
          "position": 701
        },
        "endLoc": {
          "line": 105,
          "column": 28,
          "position": 754
        }
      },
      "secondFile": {
        "name": "backend/web/static/cityOverlays.ts",
        "start": 54,
        "end": 62,
        "startLoc": {
          "line": 54,
          "column": 8,
          "position": 386
        },
        "endLoc": {
          "line": 62,
          "column": 35,
          "position": 439
        }
      }
    },
    {
      "format": "typescript",
      "lines": 5,
      "fragment": "if ((window as any).disableZoom) {\n            (window as any).disableZoom();\n        }\n        \n        const response = await fetch(`/api/city-overlay/${overlayName}/hex/",
      "tokens": 0,
      "firstFile": {
        "name": "backend/web/static/cityOverlay.ts",
        "start": 237,
        "end": 241,
        "startLoc": {
          "line": 237,
          "column": 9,
          "position": 1749
        },
        "endLoc": {
          "line": 241,
          "column": 6,
          "position": 1799
        }
      },
      "secondFile": {
        "name": "backend/web/static/cityOverlay.ts",
        "start": 188,
        "end": 192,
        "startLoc": {
          "line": 188,
          "column": 9,
          "position": 1443
        },
        "endLoc": {
          "line": 192,
          "column": 8,
          "position": 1493
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": "const mapContainer = document.querySelector('.map-container');\n            const mapZoomContainer = document.getElementById('map-zoom-container');\n            if (mapContainer && mapZoomContainer) {\n                let html = `\n          <div style=\"text-align: center; padding: 20px; height: 100%; overflow-y: auto; -webkit-overflow-scrolling: touch; touch-action: pan-y;\">\n            <div class=\"mb-4\">\n              <button class=\"btn-mork-borg btn-warning\" onclick=\"app.restoreMap()\">RETURN TO MAP</button>\n              <button class=\"btn-mork-borg\" onclick=\"app.showCityOverlayGridInMap('${overlayName}', '${hexId",
      "tokens": 0,
      "firstFile": {
        "name": "backend/web/static/cityOverlay.ts",
        "start": 246,
        "end": 253,
        "startLoc": {
          "line": 246,
          "column": 13,
          "position": 1859
        },
        "endLoc": {
          "line": 253,
          "column": 6,
          "position": 1914
        }
      },
      "secondFile": {
        "name": "backend/web/static/cityOverlay.ts",
        "start": 195,
        "end": 202,
        "startLoc": {
          "line": 195,
          "column": 13,
          "position": 1525
        },
        "endLoc": {
          "line": 202,
          "column": 8,
          "position": 1580
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": ");\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error resetting continent:'",
      "tokens": 0,
      "firstFile": {
        "name": "backend/web/static/api.ts",
        "start": 60,
        "end": 66,
        "startLoc": {
          "line": 60,
          "column": 2,
          "position": 600
        },
        "endLoc": {
          "line": 66,
          "column": 29,
          "position": 669
        }
      },
      "secondFile": {
        "name": "backend/web/static/utils/apiUtils.ts",
        "start": 33,
        "end": 39,
        "startLoc": {
          "line": 33,
          "column": 2,
          "position": 171
        },
        "endLoc": {
          "line": 39,
          "column": 19,
          "position": 240
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": ");\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching lore overview:'",
      "tokens": 0,
      "firstFile": {
        "name": "backend/web/static/api.ts",
        "start": 73,
        "end": 79,
        "startLoc": {
          "line": 73,
          "column": 21,
          "position": 723
        },
        "endLoc": {
          "line": 79,
          "column": 32,
          "position": 792
        }
      },
      "secondFile": {
        "name": "backend/web/static/utils/apiUtils.ts",
        "start": 33,
        "end": 39,
        "startLoc": {
          "line": 33,
          "column": 2,
          "position": 171
        },
        "endLoc": {
          "line": 39,
          "column": 19,
          "position": 240
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": ");\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching city overlays:'",
      "tokens": 0,
      "firstFile": {
        "name": "backend/web/static/api.ts",
        "start": 87,
        "end": 93,
        "startLoc": {
          "line": 87,
          "column": 21,
          "position": 848
        },
        "endLoc": {
          "line": 93,
          "column": 32,
          "position": 917
        }
      },
      "secondFile": {
        "name": "backend/web/static/utils/apiUtils.ts",
        "start": 33,
        "end": 39,
        "startLoc": {
          "line": 33,
          "column": 2,
          "position": 171
        },
        "endLoc": {
          "line": 39,
          "column": 19,
          "position": 240
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": ");\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching city overlay:'",
      "tokens": 0,
      "firstFile": {
        "name": "backend/web/static/api.ts",
        "start": 100,
        "end": 106,
        "startLoc": {
          "line": 100,
          "column": 2,
          "position": 979
        },
        "endLoc": {
          "line": 106,
          "column": 31,
          "position": 1048
        }
      },
      "secondFile": {
        "name": "backend/web/static/utils/apiUtils.ts",
        "start": 33,
        "end": 39,
        "startLoc": {
          "line": 33,
          "column": 2,
          "position": 171
        },
        "endLoc": {
          "line": 39,
          "column": 19,
          "position": 240
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": ");\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching city overlay ASCII:'",
      "tokens": 0,
      "firstFile": {
        "name": "backend/web/static/api.ts",
        "start": 113,
        "end": 119,
        "startLoc": {
          "line": 113,
          "column": 8,
          "position": 1110
        },
        "endLoc": {
          "line": 119,
          "column": 37,
          "position": 1179
        }
      },
      "secondFile": {
        "name": "backend/web/static/utils/apiUtils.ts",
        "start": 33,
        "end": 39,
        "startLoc": {
          "line": 33,
          "column": 2,
          "position": 171
        },
        "endLoc": {
          "line": 39,
          "column": 19,
          "position": 240
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "}`);\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching city context:'",
      "tokens": 0,
      "firstFile": {
        "name": "backend/web/static/api.ts",
        "start": 126,
        "end": 132,
        "startLoc": {
          "line": 126,
          "column": 9,
          "position": 1239
        },
        "endLoc": {
          "line": 132,
          "column": 31,
          "position": 1310
        }
      },
      "secondFile": {
        "name": "backend/web/static/api.ts",
        "start": 100,
        "end": 39,
        "startLoc": {
          "line": 100,
          "column": 12,
          "position": 977
        },
        "endLoc": {
          "line": 39,
          "column": 19,
          "position": 240
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "}`);\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching city overlay hex:'",
      "tokens": 0,
      "firstFile": {
        "name": "backend/web/static/api.ts",
        "start": 139,
        "end": 145,
        "startLoc": {
          "line": 139,
          "column": 6,
          "position": 1380
        },
        "endLoc": {
          "line": 145,
          "column": 35,
          "position": 1451
        }
      },
      "secondFile": {
        "name": "backend/web/static/api.ts",
        "start": 100,
        "end": 39,
        "startLoc": {
          "line": 100,
          "column": 12,
          "position": 977
        },
        "endLoc": {
          "line": 39,
          "column": 19,
          "position": 240
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": ");\n        if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Error fetching city districts:'",
      "tokens": 0,
      "firstFile": {
        "name": "backend/web/static/api.ts",
        "start": 153,
        "end": 159,
        "startLoc": {
          "line": 153,
          "column": 12,
          "position": 1515
        },
        "endLoc": {
          "line": 159,
          "column": 33,
          "position": 1584
        }
      },
      "secondFile": {
        "name": "backend/web/static/utils/apiUtils.ts",
        "start": 33,
        "end": 39,
        "startLoc": {
          "line": 33,
          "column": 2,
          "position": 171
        },
        "endLoc": {
          "line": 39,
          "column": 19,
          "position": 240
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "}`);\n        if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Error fetching district details:'",
      "tokens": 0,
      "firstFile": {
        "name": "backend/web/static/api.ts",
        "start": 166,
        "end": 172,
        "startLoc": {
          "line": 166,
          "column": 2,
          "position": 1657
        },
        "endLoc": {
          "line": 172,
          "column": 35,
          "position": 1728
        }
      },
      "secondFile": {
        "name": "backend/web/static/api.ts",
        "start": 100,
        "end": 39,
        "startLoc": {
          "line": 100,
          "column": 12,
          "position": 977
        },
        "endLoc": {
          "line": 39,
          "column": 19,
          "position": 240
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": ");\n        if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Error fetching district random table:'",
      "tokens": 0,
      "firstFile": {
        "name": "backend/web/static/api.ts",
        "start": 179,
        "end": 185,
        "startLoc": {
          "line": 179,
          "column": 15,
          "position": 1803
        },
        "endLoc": {
          "line": 185,
          "column": 40,
          "position": 1872
        }
      },
      "secondFile": {
        "name": "backend/web/static/utils/apiUtils.ts",
        "start": 33,
        "end": 39,
        "startLoc": {
          "line": 33,
          "column": 2,
          "position": 171
        },
        "endLoc": {
          "line": 39,
          "column": 19,
          "position": 240
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "}`);\n        if (!response.ok) {\n            throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Error fetching district specific random table:'",
      "tokens": 0,
      "firstFile": {
        "name": "backend/web/static/api.ts",
        "start": 192,
        "end": 198,
        "startLoc": {
          "line": 192,
          "column": 10,
          "position": 1955
        },
        "endLoc": {
          "line": 198,
          "column": 49,
          "position": 2026
        }
      },
      "secondFile": {
        "name": "backend/web/static/api.ts",
        "start": 100,
        "end": 39,
        "startLoc": {
          "line": 100,
          "column": 12,
          "position": 977
        },
        "endLoc": {
          "line": 39,
          "column": 19,
          "position": 240
        }
      }
    },
    {
      "format": "typescript",
      "lines": 14,
      "fragment": "}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n    \n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    \n    return response.json();\n  } catch (error) {\n    console.error('Error regenerating overlay:'",
      "tokens": 0,
      "firstFile": {
        "name": "backend/web/static/api.ts",
        "start": 225,
        "end": 238,
        "startLoc": {
          "line": 225,
          "column": 12,
          "position": 2253
        },
        "endLoc": {
          "line": 238,
          "column": 30,
          "position": 2350
        }
      },
      "secondFile": {
        "name": "backend/web/static/api.ts",
        "start": 205,
        "end": 218,
        "startLoc": {
          "line": 205,
          "column": 6,
          "position": 2096
        },
        "endLoc": {
          "line": 218,
          "column": 26,
          "position": 2193
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n    \n    # Set headers to prevent caching issues\n    response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'\n    response.headers['Pragma'] = 'no-cache'\n    response.headers['Expires'] = '0'\n    \n    return response, 200\n\n\ndef handle_exception_response",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/response_helpers.py",
        "start": 88,
        "end": 98,
        "startLoc": {
          "line": 88,
          "column": 9,
          "position": 372
        },
        "endLoc": {
          "line": 98,
          "column": 26,
          "position": 429
        }
      },
      "secondFile": {
        "name": "backend/utils/response_helpers.py",
        "start": 68,
        "end": 78,
        "startLoc": {
          "line": 68,
          "column": 2,
          "position": 284
        },
        "endLoc": {
          "line": 78,
          "column": 20,
          "position": 341
        }
      }
    },
    {
      "format": "python",
      "lines": 4,
      "fragment": "name = npc_data.get('name', 'Unknown')\n    trait = npc_data.get('trait', 'mysterious')\n    trade = npc_data.get('trade', 'wanderer')\n    concern",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/npc_generator.py",
        "start": 103,
        "end": 106,
        "startLoc": {
          "line": 103,
          "column": 5,
          "position": 792
        },
        "endLoc": {
          "line": 106,
          "column": 8,
          "position": 837
        }
      },
      "secondFile": {
        "name": "backend/utils/npc_generator.py",
        "start": 82,
        "end": 86,
        "startLoc": {
          "line": 82,
          "column": 5,
          "position": 683
        },
        "endLoc": {
          "line": 86,
          "column": 7,
          "position": 730
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n    lines.append(f\"**{trait_label}:** {trait}\")\n    lines.append(f\"**{concern_label}:** {concern}\")\n    lines.append(f\"**{want_label}:** {want}\")\n    lines.append(f\"**{apocalypse_label}:** {apocalypse_attitude}\")\n    lines.append(f\"**{secret_label}:** {secret}\")\n    lines.append(\"\"",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/npc_generator.py",
        "start": 145,
        "end": 151,
        "startLoc": {
          "line": 145,
          "column": 20,
          "position": 1253
        },
        "endLoc": {
          "line": 151,
          "column": 3,
          "position": 1305
        }
      },
      "secondFile": {
        "name": "backend/utils/npc_generator.py",
        "start": 126,
        "end": 132,
        "startLoc": {
          "line": 126,
          "column": 3,
          "position": 1092
        },
        "endLoc": {
          "line": 132,
          "column": 2,
          "position": 1144
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n    lines.append(\"\")\n    \n    # Add common sections\n    lines.extend(format_threat_level_and_territory(hex_data, translation_system))\n    lines.extend(format_loot_section(hex_data, translation_system))\n    \n    return lines\n\n\ndef format_npc_details",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/markdown_formatter.py",
        "start": 104,
        "end": 114,
        "startLoc": {
          "line": 104,
          "column": 64,
          "position": 592
        },
        "endLoc": {
          "line": 114,
          "column": 19,
          "position": 646
        }
      },
      "secondFile": {
        "name": "backend/utils/markdown_formatter.py",
        "start": 79,
        "end": 89,
        "startLoc": {
          "line": 79,
          "column": 68,
          "position": 462
        },
        "endLoc": {
          "line": 89,
          "column": 29,
          "position": 516
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "\"affiliation\", \"basic\", \"beasts_prices\", \n    \"bestiary\", \"city_events\", \"core\", \"denizen\", \"dungeon\", \"enhanced_loot\", \n    \"items_prices\", \"items_trinkets\", \"loot\", \"npc_apocalypse\", \"npc_concerns\", \n    \"npc_names\", \"npc_secrets\", \"npc_trades\", \"npc_traits\", \"npc_wants\",\n    \"scroll\", \"services_prices\", \"stats\", \"tavern\", \"tavern_innkeeper\",\n    \"tavern_menu\", \"tavern_patrons\", \"traps_builders\", \"traps_effects\", \n    \"traps_triggers\", \"weapons_prices\", \"weather\", \"wilderness\"\n]\n\n\ndef",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/database_categories.py",
        "start": 30,
        "end": 40,
        "startLoc": {
          "line": 30,
          "column": 2,
          "position": 219
        },
        "endLoc": {
          "line": 40,
          "column": 4,
          "position": 328
        }
      },
      "secondFile": {
        "name": "backend/utils/database_categories.py",
        "start": 10,
        "end": 19,
        "startLoc": {
          "line": 10,
          "column": 5,
          "position": 48
        },
        "endLoc": {
          "line": 19,
          "column": 43,
          "position": 156
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ", content, re.DOTALL)\n    if description_match:\n        data['description'] = description_match.group(1).strip()\n    \n    return data\n\n\ndef parse_loot_section(content: str) -> Optional[Dict[str, str]]:\n    \"\"\"\n    Parse loot section from markdown content.\n    \n    Args:\n        content: Markdown content string\n        \n    Returns:\n        Dictionary containing loot data or None if not found\n    \"\"\"\n    # Use centralized markdown parser",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/content_parser.py",
        "start": 28,
        "end": 45,
        "startLoc": {
          "line": 28,
          "column": 38,
          "position": 144
        },
        "endLoc": {
          "line": 45,
          "column": 34,
          "position": 217
        }
      },
      "secondFile": {
        "name": "backend/utils/markdown_parser.py",
        "start": 38,
        "end": 55,
        "startLoc": {
          "line": 38,
          "column": 34,
          "position": 264
        },
        "endLoc": {
          "line": 55,
          "column": 11,
          "position": 337
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "try:\n        # Use configurable path from config system\n        from backend.config import get_config\n        config = get_config()\n        hex_file_path = config.paths.output_path / \"hexes\" / f\"hex_{hex_code}.md\"\n        \n        if not hex_file_path.exists():\n            return False",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/content_detector.py",
        "start": 54,
        "end": 61,
        "startLoc": {
          "line": 54,
          "column": 5,
          "position": 232
        },
        "endLoc": {
          "line": 61,
          "column": 6,
          "position": 295
        }
      },
      "secondFile": {
        "name": "backend/utils/content_detector.py",
        "start": 19,
        "end": 26,
        "startLoc": {
          "line": 19,
          "column": 5,
          "position": 40
        },
        "endLoc": {
          "line": 26,
          "column": 5,
          "position": 103
        }
      }
    },
    {
      "format": "python",
      "lines": 5,
      "fragment": "beast_type = beast_data.get('beast_type', 'Unknown beast')\n    feature = beast_data.get('beast_feature', 'mysterious appearance')\n    behavior = beast_data.get('beast_behavior', 'hunts in the area')\n    \n    lines",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/beast_generator.py",
        "start": 73,
        "end": 77,
        "startLoc": {
          "line": 73,
          "column": 5,
          "position": 430
        },
        "endLoc": {
          "line": 77,
          "column": 6,
          "position": 477
        }
      },
      "secondFile": {
        "name": "backend/utils/beast_generator.py",
        "start": 55,
        "end": 59,
        "startLoc": {
          "line": 55,
          "column": 5,
          "position": 344
        },
        "endLoc": {
          "line": 59,
          "column": 7,
          "position": 391
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "if current_section and section_content:\n        section_text = '\\n'.join(section_content).strip()\n        if current_section in data:\n            if current_section == 'tavern_details':\n                # Don't overwrite tavern_details with string content\n                pass\n            else:\n                data[current_section] = section_text\n    \n    return",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/ascii_processor.py",
        "start": 85,
        "end": 94,
        "startLoc": {
          "line": 85,
          "column": 5,
          "position": 510
        },
        "endLoc": {
          "line": 94,
          "column": 7,
          "position": 578
        }
      },
      "secondFile": {
        "name": "backend/utils/ascii_processor.py",
        "start": 58,
        "end": 66,
        "startLoc": {
          "line": 58,
          "column": 13,
          "position": 310
        },
        "endLoc": {
          "line": 66,
          "column": 16,
          "position": 376
        }
      }
    },
    {
      "format": "python",
      "lines": 167,
      "fragment": "def setup_project_paths() -> None:\n    \"\"\"Add project root to Python path for imports.\"\"\"\n    project_root = get_config().paths.project_root\n    if str(project_root) not in sys.path:\n        sys.path.insert(0, str(project_root))\n\ndef validate_hex_code(hex_code: str) -> bool:\n    \"\"\"Validate hex code format (XXYY).\"\"\"\n    if not isinstance(hex_code, str):\n        return False\n    return bool(re.match(r'^\\d{4}$', hex_code))\n\ndef parse_hex_coordinates(hex_code: str) -> Tuple[int, int]:\n    \"\"\"Parse hex code to x, y coordinates.\"\"\"\n    if not validate_hex_code(hex_code):\n        raise ValueError(f\"Invalid hex code format: {hex_code}\")\n    x = int(hex_code[:2])\n    y = int(hex_code[2:])\n    return x, y\n\ndef format_hex_code(x: int, y: int) -> str:\n    \"\"\"Format x, y coordinates to hex code.\"\"\"\n    return f\"{x:02d}{y:02d}\"\n\ndef safe_file_write(file_path: Path, content: str, encoding: str = 'utf-8') -> None:\n    \"\"\"Safely write content to file with proper error handling.\"\"\"\n    try:\n        file_path.parent.mkdir(parents=True, exist_ok=True)\n        with open(file_path, 'w', encoding=encoding) as f:\n            f.write(content)\n    except Exception as e:\n        raise IOError(f\"Failed to write file {file_path}: {e}\")\n\ndef safe_file_read(file_path: Path, encoding: str = 'utf-8') -> str:\n    \"\"\"Safely read content from file with proper error handling.\"\"\"\n    try:\n        with open(file_path, 'r', encoding=encoding) as f:\n            return f.read()\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"File not found: {file_path}\")\n    except Exception as e:\n        raise IOError(f\"Failed to read file {file_path}: {e}\")\n\ndef weighted_choice(weights: Dict[str, float]) -> str:\n    \"\"\"Make a weighted random choice from a dictionary of options and weights.\"\"\"\n    if not weights:\n        raise ValueError(\"Weights dictionary cannot be empty\")\n    \n    total_weight = sum(weights.values())\n    if total_weight <= 0:\n        raise ValueError(\"Total weight must be positive\")\n    \n    rand_val = random.uniform(0, total_weight)\n    cumulative_weight = 0\n    \n    for option, weight in weights.items():\n        cumulative_weight += weight\n        if rand_val <= cumulative_weight:\n            return option\n    \n    # Fallback to last option (shouldn't happen with proper weights)\n    return list(weights.keys())[-1]\n\ndef extract_title_from_content(content: str) -> str:\n    \"\"\"Extract title from markdown content.\"\"\"\n    lines = content.strip().split('\\n')\n    for line in lines:\n        line = line.strip()\n        if line.startswith('# '):\n            return line[2:].strip()\n        elif line.startswith('**') and line.endswith('**'):\n            return line[2:-2].strip()\n    return \"Untitled\"\n\ndef sanitize_filename(filename: str) -> str:\n    \"\"\"Sanitize filename for safe file system operations.\"\"\"\n    # Remove or replace problematic characters\n    sanitized = re.sub(r'[<>:\"/\\\\|?*]', '_', filename)\n    # Remove leading/trailing spaces and dots\n    sanitized = sanitized.strip('. ')\n    # Limit length\n    if len(sanitized) > 255:\n        sanitized = sanitized[:255]\n    return sanitized\n\ndef merge_dictionaries(dict1: Dict[str, Any], dict2: Dict[str, Any]) -> Dict[str, Any]:\n    \"\"\"Deep merge two dictionaries, with dict2 taking precedence.\"\"\"\n    result = dict1.copy()\n    for key, value in dict2.items():\n        if key in result and isinstance(result[key], dict) and isinstance(value, dict):\n            result[key] = merge_dictionaries(result[key], value)\n        else:\n            result[key] = value\n    return result\n\ndef chunk_list(lst: List[Any], chunk_size: int) -> List[List[Any]]:\n    \"\"\"Split a list into chunks of specified size.\"\"\"\n    return [lst[i:i + chunk_size] for i in range(0, len(lst), chunk_size)]\n\ndef flatten_list(nested_list: List[Any]) -> List[Any]:\n    \"\"\"Flatten a nested list structure.\"\"\"\n    flattened = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened\n\ndef get_file_size_mb(file_path: Path) -> float:\n    \"\"\"Get file size in megabytes.\"\"\"\n    try:\n        return file_path.stat().st_size / (1024 * 1024)\n    except OSError:\n        return 0.0\n\ndef format_file_size(size_bytes: int) -> str:\n    \"\"\"Format file size in human-readable format.\"\"\"\n    for unit in ['B', 'KB', 'MB', 'GB']:\n        if size_bytes < 1024.0:\n            return f\"{size_bytes:.1f} {unit}\"\n        size_bytes /= 1024.0\n    return f\"{size_bytes:.1f} TB\"\n\ndef ensure_directory_exists(directory: Path) -> None:\n    \"\"\"Ensure directory exists, create if necessary.\"\"\"\n    directory.mkdir(parents=True, exist_ok=True)\n\ndef list_files_with_extension(directory: Path, extension: str) -> List[Path]:\n    \"\"\"List all files with specified extension in directory.\"\"\"\n    if not directory.exists():\n        return []\n    return list(directory.glob(f\"*.{extension}\"))\n\ndef backup_file(file_path: Path, backup_suffix: str = \".backup\") -> Path:\n    \"\"\"Create a backup of a file.\"\"\"\n    backup_path = file_path.with_suffix(file_path.suffix + backup_suffix)\n    if file_path.exists():\n        shutil.copy2(file_path, backup_path)\n    return backup_path\n\ndef is_valid_json(content: str) -> bool:\n    \"\"\"Check if string is valid JSON.\"\"\"\n    try:\n        json.loads(content)\n        return True\n    except (json.JSONDecodeError, ValueError):\n        return False\n\ndef retry_operation(operation, max_attempts: int = 3, delay: float = 1.0):\n    \"\"\"Retry an operation with exponential backoff.\"\"\"\n    \n    for attempt in range(max_attempts):\n        try:\n            return operation()\n        except Exception as e:\n            if attempt == max_attempts - 1:\n                raise e\n            time.sleep(delay * (2 ** attempt))\n    \n    raise RuntimeError(f\"Operation failed after {max_attempts} attempts\")\n\ndef log_operation(operation_name: str, success: bool, details: str = \"\"):\n    \"\"\"Log operation results for debugging.\"\"\"\n    status = \"✅ SUCCESS\" if success else \"❌ FAILED\"\n    timestamp = __import__('datetime').datetime.now().isoformat()\n    print(f\"[{timestamp}] {status} - {operation_name}: {details}\")",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils.py",
        "start": 18,
        "end": 184,
        "startLoc": {
          "line": 18,
          "column": 1,
          "position": 72
        },
        "endLoc": {
          "line": 184,
          "column": 2,
          "position": 1714
        }
      },
      "secondFile": {
        "name": "backend/utils/core_utils.py",
        "start": 18,
        "end": 184,
        "startLoc": {
          "line": 18,
          "column": 1,
          "position": 72
        },
        "endLoc": {
          "line": 184,
          "column": 2,
          "position": 1714
        }
      }
    },
    {
      "format": "python",
      "lines": 4,
      "fragment": "for x in range(1, self.map_width + 1):\n            for y in range(1, self.map_height + 1):\n                hex_code = f\"{x:02d}{y:02d}\"\n                overview",
      "tokens": 0,
      "firstFile": {
        "name": "backend/terrain_system.py",
        "start": 194,
        "end": 197,
        "startLoc": {
          "line": 194,
          "column": 9,
          "position": 1711
        },
        "endLoc": {
          "line": 197,
          "column": 9,
          "position": 1763
        }
      },
      "secondFile": {
        "name": "backend/terrain_system.py",
        "start": 113,
        "end": 116,
        "startLoc": {
          "line": 113,
          "column": 9,
          "position": 909
        },
        "endLoc": {
          "line": 116,
          "column": 10,
          "position": 961
        }
      }
    },
    {
      "format": "python",
      "lines": 5,
      "fragment": "}\n        for x in range(1, self.map_width + 1):\n            for y in range(1, self.map_height + 1):\n                hex_code = f\"{x:02d}{y:02d}\"\n                terrain",
      "tokens": 0,
      "firstFile": {
        "name": "backend/terrain_system.py",
        "start": 201,
        "end": 205,
        "startLoc": {
          "line": 201,
          "column": 14,
          "position": 1824
        },
        "endLoc": {
          "line": 205,
          "column": 8,
          "position": 1879
        }
      },
      "secondFile": {
        "name": "backend/terrain_system.py",
        "start": 193,
        "end": 116,
        "startLoc": {
          "line": 193,
          "column": 2,
          "position": 1708
        },
        "endLoc": {
          "line": 116,
          "column": 10,
          "position": 961
        }
      }
    },
    {
      "format": "python",
      "lines": 4,
      "fragment": ":\n                    color = self.map_image.getpixel((x, y))\n                    if isinstance(color, tuple) and len(color) >= 3:\n                        colors",
      "tokens": 0,
      "firstFile": {
        "name": "backend/image_analyzer.py",
        "start": 180,
        "end": 183,
        "startLoc": {
          "line": 180,
          "column": 4,
          "position": 2697
        },
        "endLoc": {
          "line": 183,
          "column": 7,
          "position": 2742
        }
      },
      "secondFile": {
        "name": "backend/image_analyzer.py",
        "start": 160,
        "end": 163,
        "startLoc": {
          "line": 160,
          "column": 11,
          "position": 2326
        },
        "endLoc": {
          "line": 163,
          "column": 7,
          "position": 2371
        }
      }
    },
    {
      "format": "python",
      "lines": 4,
      "fragment": ".getpixel((x, y))\n                if isinstance(color, tuple) and len(color) >= 3:\n                    pixels.append(color[:3])\n        counter",
      "tokens": 0,
      "firstFile": {
        "name": "backend/image_analyzer.py",
        "start": 249,
        "end": 252,
        "startLoc": {
          "line": 249,
          "column": 4,
          "position": 3546
        },
        "endLoc": {
          "line": 252,
          "column": 8,
          "position": 3593
        }
      },
      "secondFile": {
        "name": "backend/image_analyzer.py",
        "start": 161,
        "end": 164,
        "startLoc": {
          "line": 161,
          "column": 10,
          "position": 2336
        },
        "endLoc": {
          "line": 164,
          "column": 3,
          "position": 2383
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "return {\n            \"hex_code\": self.hex_code,\n            \"terrain\": self.terrain.value,\n            \"exists\": self.exists,\n            \"hex_type\": self.get_hex_type().value,\n            \"is_settlement\"",
      "tokens": 0,
      "firstFile": {
        "name": "backend/hex_model.py",
        "start": 94,
        "end": 99,
        "startLoc": {
          "line": 94,
          "column": 9,
          "position": 564
        },
        "endLoc": {
          "line": 99,
          "column": 16,
          "position": 611
        }
      },
      "secondFile": {
        "name": "backend/hex_model.py",
        "start": 49,
        "end": 54,
        "startLoc": {
          "line": 49,
          "column": 9,
          "position": 257
        },
        "endLoc": {
          "line": 54,
          "column": 15,
          "position": 304
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "def to_dict(self) -> Dict[str, Any]:\n        return {\n            \"hex_code\": self.hex_code,\n            \"terrain\": self.terrain.value,\n            \"exists\": self.exists,\n            \"hex_type\": self.get_hex_type().value,\n            \"is_dungeon\"",
      "tokens": 0,
      "firstFile": {
        "name": "backend/hex_model.py",
        "start": 138,
        "end": 144,
        "startLoc": {
          "line": 138,
          "column": 5,
          "position": 905
        },
        "endLoc": {
          "line": 144,
          "column": 13,
          "position": 972
        }
      },
      "secondFile": {
        "name": "backend/hex_model.py",
        "start": 93,
        "end": 54,
        "startLoc": {
          "line": 93,
          "column": 5,
          "position": 544
        },
        "endLoc": {
          "line": 54,
          "column": 15,
          "position": 304
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "def to_dict(self) -> Dict[str, Any]:\n        return {\n            \"hex_code\": self.hex_code,\n            \"terrain\": self.terrain.value,\n            \"exists\": self.exists,\n            \"hex_type\": self.get_hex_type().value,\n            \"is_beast\"",
      "tokens": 0,
      "firstFile": {
        "name": "backend/hex_model.py",
        "start": 182,
        "end": 188,
        "startLoc": {
          "line": 182,
          "column": 5,
          "position": 1251
        },
        "endLoc": {
          "line": 188,
          "column": 11,
          "position": 1318
        }
      },
      "secondFile": {
        "name": "backend/hex_model.py",
        "start": 93,
        "end": 54,
        "startLoc": {
          "line": 93,
          "column": 5,
          "position": 544
        },
        "endLoc": {
          "line": 54,
          "column": 15,
          "position": 304
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "def to_dict(self) -> Dict[str, Any]:\n        return {\n            \"hex_code\": self.hex_code,\n            \"terrain\": self.terrain.value,\n            \"exists\": self.exists,\n            \"hex_type\": self.get_hex_type().value,\n            \"is_npc\"",
      "tokens": 0,
      "firstFile": {
        "name": "backend/hex_model.py",
        "start": 234,
        "end": 240,
        "startLoc": {
          "line": 234,
          "column": 5,
          "position": 1671
        },
        "endLoc": {
          "line": 240,
          "column": 9,
          "position": 1738
        }
      },
      "secondFile": {
        "name": "backend/hex_model.py",
        "start": 93,
        "end": 54,
        "startLoc": {
          "line": 93,
          "column": 5,
          "position": 544
        },
        "endLoc": {
          "line": 54,
          "column": 15,
          "position": 304
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "def to_dict(self) -> Dict[str, Any]:\n        return {\n            \"hex_code\": self.hex_code,\n            \"terrain\": self.terrain.value,\n            \"exists\": self.exists,\n            \"hex_type\": self.get_hex_type().value,\n            \"is_sea_encounter\"",
      "tokens": 0,
      "firstFile": {
        "name": "backend/hex_model.py",
        "start": 284,
        "end": 290,
        "startLoc": {
          "line": 284,
          "column": 5,
          "position": 2051
        },
        "endLoc": {
          "line": 290,
          "column": 19,
          "position": 2118
        }
      },
      "secondFile": {
        "name": "backend/hex_model.py",
        "start": 93,
        "end": 54,
        "startLoc": {
          "line": 93,
          "column": 5,
          "position": 544
        },
        "endLoc": {
          "line": 54,
          "column": 15,
          "position": 304
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ",\n            \"denizen\": self.denizen,\n            \"territory\": self.territory,\n            \"threat_level\": self.threat_level,\n            \"notable_feature\": self.notable_feature,\n            \"atmosphere\": self.atmosphere,\n            \"loot\": self.loot.to_dict() if self.loot else None,\n            # Sea encounter specific fields",
      "tokens": 0,
      "firstFile": {
        "name": "backend/hex_model.py",
        "start": 292,
        "end": 299,
        "startLoc": {
          "line": 292,
          "column": 15,
          "position": 2140
        },
        "endLoc": {
          "line": 299,
          "column": 32,
          "position": 2211
        }
      },
      "secondFile": {
        "name": "backend/hex_model.py",
        "start": 192,
        "end": 199,
        "startLoc": {
          "line": 192,
          "column": 15,
          "position": 1358
        },
        "endLoc": {
          "line": 199,
          "column": 24,
          "position": 1429
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "with open(filepath, 'r', encoding='utf-8') as f:\n                    data = json.load(f)\n                    category = filename.replace('.json', '')\n                    tables[f\"{category}_tables\"] = data.get('tables', {})\n        \n        return tables\n    \n    def _load_content_tables",
      "tokens": 0,
      "firstFile": {
        "name": "backend/database_manager.py",
        "start": 85,
        "end": 92,
        "startLoc": {
          "line": 85,
          "column": 17,
          "position": 666
        },
        "endLoc": {
          "line": 92,
          "column": 21,
          "position": 745
        }
      },
      "secondFile": {
        "name": "backend/database_manager.py",
        "start": 68,
        "end": 75,
        "startLoc": {
          "line": 68,
          "column": 17,
          "position": 498
        },
        "endLoc": {
          "line": 75,
          "column": 18,
          "position": 577
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "all_data = {}\n            for lang in ['en', 'pt']:\n                all_data[lang] = self.load_tables(lang)\n            \n            with open(output_path, 'w', encoding='utf-8') as f:\n                yaml",
      "tokens": 0,
      "firstFile": {
        "name": "backend/database_manager.py",
        "start": 194,
        "end": 199,
        "startLoc": {
          "line": 194,
          "column": 13,
          "position": 1738
        },
        "endLoc": {
          "line": 199,
          "column": 5,
          "position": 1799
        }
      },
      "secondFile": {
        "name": "backend/database_manager.py",
        "start": 185,
        "end": 190,
        "startLoc": {
          "line": 185,
          "column": 13,
          "position": 1639
        },
        "endLoc": {
          "line": 190,
          "column": 5,
          "position": 1700
        }
      }
    }
  ]
}