{
  "statistics": {
    "detectionDate": "2025-08-13T14:45:38.205Z",
    "formats": {
      "python": {
        "sources": {
          "/workspace/backend/utils/tavern_generator.py": {
            "lines": 66,
            "tokens": 445,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 3,
            "duplicatedTokens": 41,
            "percentage": 4.55,
            "percentageTokens": 9.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/settlement_generator.py": {
            "lines": 113,
            "tokens": 496,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/settlement_data_creator.py": {
            "lines": 63,
            "tokens": 429,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 24,
            "duplicatedTokens": 100,
            "percentage": 38.1,
            "percentageTokens": 23.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/response_helpers.py": {
            "lines": 112,
            "tokens": 487,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 34,
            "duplicatedTokens": 216,
            "percentage": 30.36,
            "percentageTokens": 44.35,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/npc_generator.py": {
            "lines": 152,
            "tokens": 1318,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 18,
            "duplicatedTokens": 194,
            "percentage": 11.84,
            "percentageTokens": 14.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/markdown_parser.py": {
            "lines": 136,
            "tokens": 829,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 21,
            "duplicatedTokens": 111,
            "percentage": 15.44,
            "percentageTokens": 13.39,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/markdown_formatter.py": {
            "lines": 166,
            "tokens": 1152,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 100,
            "duplicatedTokens": 332,
            "percentage": 60.24,
            "percentageTokens": 28.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/loot_generator.py": {
            "lines": 131,
            "tokens": 880,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/hex_field_creator.py": {
            "lines": 62,
            "tokens": 402,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/grid_generator.py": {
            "lines": 155,
            "tokens": 755,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 3,
            "duplicatedTokens": 36,
            "percentage": 1.94,
            "percentageTokens": 4.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/database_categories.py": {
            "lines": 135,
            "tokens": 921,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 218,
            "percentage": 14.81,
            "percentageTokens": 23.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/content_parser.py": {
            "lines": 126,
            "tokens": 636,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 21,
            "duplicatedTokens": 111,
            "percentage": 16.67,
            "percentageTokens": 17.45,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/content_detector.py": {
            "lines": 96,
            "tokens": 464,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 22,
            "duplicatedTokens": 220,
            "percentage": 22.92,
            "percentageTokens": 47.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/city_processor.py": {
            "lines": 52,
            "tokens": 302,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 2,
            "duplicatedTokens": 28,
            "percentage": 3.85,
            "percentageTokens": 9.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/city_helpers.py": {
            "lines": 76,
            "tokens": 445,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/beast_generator.py": {
            "lines": 100,
            "tokens": 677,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 8,
            "duplicatedTokens": 94,
            "percentage": 8,
            "percentageTokens": 13.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/ascii_processor.py": {
            "lines": 198,
            "tokens": 1252,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 136,
            "percentage": 9.09,
            "percentageTokens": 10.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils/__init__.py": {
            "lines": 204,
            "tokens": 730,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/utils.py": {
            "lines": 183,
            "tokens": 1714,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 4,
            "duplicatedTokens": 40,
            "percentage": 2.19,
            "percentageTokens": 2.33,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/translation_system.py": {
            "lines": 342,
            "tokens": 2146,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/terrain_system.py": {
            "lines": 260,
            "tokens": 2396,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 19,
            "duplicatedTokens": 255,
            "percentage": 7.31,
            "percentageTokens": 10.64,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/run.py": {
            "lines": 11,
            "tokens": 40,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/mork_borg_lore_database.py": {
            "lines": 766,
            "tokens": 3942,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 3,
            "duplicatedTokens": 36,
            "percentage": 0.39,
            "percentageTokens": 0.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/models.py": {
            "lines": 55,
            "tokens": 304,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/image_analyzer.py": {
            "lines": 269,
            "tokens": 3779,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 31,
            "duplicatedTokens": 421,
            "percentage": 11.52,
            "percentageTokens": 11.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/hex_model.py": {
            "lines": 408,
            "tokens": 3264,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 52,
            "duplicatedTokens": 478,
            "percentage": 12.75,
            "percentageTokens": 14.64,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/generation_engine.py": {
            "lines": 539,
            "tokens": 4339,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 13,
            "duplicatedTokens": 165,
            "percentage": 2.41,
            "percentageTokens": 3.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/database_manager.py": {
            "lines": 365,
            "tokens": 3367,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 42,
            "duplicatedTokens": 512,
            "percentage": 11.51,
            "percentageTokens": 15.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/config.py": {
            "lines": 180,
            "tokens": 1695,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/app.py": {
            "lines": 40,
            "tokens": 212,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/workspace/backend/__init__.py": {
            "lines": 47,
            "tokens": 358,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 5608,
          "tokens": 40176,
          "sources": 31,
          "clones": 40,
          "duplicatedLines": 229,
          "duplicatedTokens": 1872,
          "percentage": 4.08,
          "percentageTokens": 4.66,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      }
    },
    "total": {
      "lines": 5608,
      "tokens": 40176,
      "sources": 31,
      "clones": 40,
      "duplicatedLines": 229,
      "duplicatedTokens": 1872,
      "percentage": 4.08,
      "percentageTokens": 4.66,
      "newDuplicatedLines": 0,
      "newClones": 0
    }
  },
  "duplicates": [
    {
      "format": "python",
      "lines": 12,
      "fragment": ": Dict[str, Any], hex_code: str, terrain: str) -> Dict[str, Any]:\n    \"\"\"\n    Create standardized major city response data.\n    \n    Args:\n        city_data: Dictionary containing city data\n        hex_code: Hex code\n        terrain: Terrain type\n        \n    Returns:\n        Dictionary containing major city response data\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/settlement_data_creator.py",
        "start": 39,
        "end": 50,
        "startLoc": {
          "line": 39,
          "column": 10,
          "position": 260
        },
        "endLoc": {
          "line": 50,
          "column": 8,
          "position": 296
        }
      },
      "secondFile": {
        "name": "backend/utils/settlement_data_creator.py",
        "start": 8,
        "end": 19,
        "startLoc": {
          "line": 8,
          "column": 9,
          "position": 21
        },
        "endLoc": {
          "line": 19,
          "column": 8,
          "position": 57
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n    \n    # Set headers to prevent caching issues\n    response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'\n    response.headers['Pragma'] = 'no-cache'\n    response.headers['Expires'] = '0'\n    \n    return response, 200",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/response_helpers.py",
        "start": 68,
        "end": 75,
        "startLoc": {
          "line": 68,
          "column": 2,
          "position": 284
        },
        "endLoc": {
          "line": 75,
          "column": 4,
          "position": 335
        }
      },
      "secondFile": {
        "name": "backend/utils/response_helpers.py",
        "start": 20,
        "end": 27,
        "startLoc": {
          "line": 20,
          "column": 5,
          "position": 73
        },
        "endLoc": {
          "line": 27,
          "column": 12,
          "position": 124
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n    \n    # Set headers to prevent caching issues\n    response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'\n    response.headers['Pragma'] = 'no-cache'\n    response.headers['Expires'] = '0'\n    \n    return response, 200\n\n\ndef handle_exception_response",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/response_helpers.py",
        "start": 88,
        "end": 98,
        "startLoc": {
          "line": 88,
          "column": 9,
          "position": 372
        },
        "endLoc": {
          "line": 98,
          "column": 26,
          "position": 429
        }
      },
      "secondFile": {
        "name": "backend/utils/response_helpers.py",
        "start": 20,
        "end": 78,
        "startLoc": {
          "line": 20,
          "column": 5,
          "position": 73
        },
        "endLoc": {
          "line": 78,
          "column": 20,
          "position": 341
        }
      }
    },
    {
      "format": "python",
      "lines": 4,
      "fragment": "name = npc_data.get('name', 'Unknown')\n    trait = npc_data.get('trait', 'mysterious')\n    trade = npc_data.get('trade', 'wanderer')\n    concern",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/npc_generator.py",
        "start": 103,
        "end": 106,
        "startLoc": {
          "line": 103,
          "column": 5,
          "position": 792
        },
        "endLoc": {
          "line": 106,
          "column": 8,
          "position": 837
        }
      },
      "secondFile": {
        "name": "backend/utils/npc_generator.py",
        "start": 82,
        "end": 86,
        "startLoc": {
          "line": 82,
          "column": 5,
          "position": 683
        },
        "endLoc": {
          "line": 86,
          "column": 7,
          "position": 730
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n    lines.append(f\"**{trait_label}:** {trait}\")\n    lines.append(f\"**{concern_label}:** {concern}\")\n    lines.append(f\"**{want_label}:** {want}\")\n    lines.append(f\"**{apocalypse_label}:** {apocalypse_attitude}\")\n    lines.append(f\"**{secret_label}:** {secret}\")\n    lines.append(\"\"",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/npc_generator.py",
        "start": 145,
        "end": 151,
        "startLoc": {
          "line": 145,
          "column": 20,
          "position": 1253
        },
        "endLoc": {
          "line": 151,
          "column": 3,
          "position": 1305
        }
      },
      "secondFile": {
        "name": "backend/utils/npc_generator.py",
        "start": 126,
        "end": 132,
        "startLoc": {
          "line": 126,
          "column": 3,
          "position": 1092
        },
        "endLoc": {
          "line": 132,
          "column": 2,
          "position": 1144
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "(hex_data: Dict[str, Any], translation_system=None) -> List[str]:\n    \"\"\"\n    Format loot section for markdown.\n    \n    Args:\n        hex_data: Dictionary containing hex data\n        translation_system: Translation system instance\n        \n    Returns:\n        List of markdown lines\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/markdown_formatter.py",
        "start": 37,
        "end": 47,
        "startLoc": {
          "line": 37,
          "column": 20,
          "position": 197
        },
        "endLoc": {
          "line": 47,
          "column": 8,
          "position": 225
        }
      },
      "secondFile": {
        "name": "backend/utils/markdown_formatter.py",
        "start": 8,
        "end": 18,
        "startLoc": {
          "line": 8,
          "column": 34,
          "position": 22
        },
        "endLoc": {
          "line": 18,
          "column": 8,
          "position": 50
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "(hex_data: Dict[str, Any], translation_system=None) -> List[str]:\n    \"\"\"\n    Format beast details for markdown.\n    \n    Args:\n        hex_data: Dictionary containing hex data\n        translation_system: Translation system instance\n        \n    Returns:\n        List of markdown lines\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/markdown_formatter.py",
        "start": 59,
        "end": 69,
        "startLoc": {
          "line": 59,
          "column": 21,
          "position": 327
        },
        "endLoc": {
          "line": 69,
          "column": 8,
          "position": 355
        }
      },
      "secondFile": {
        "name": "backend/utils/markdown_formatter.py",
        "start": 8,
        "end": 18,
        "startLoc": {
          "line": 8,
          "column": 34,
          "position": 22
        },
        "endLoc": {
          "line": 18,
          "column": 8,
          "position": 50
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "(hex_data: Dict[str, Any], translation_system=None) -> List[str]:\n    \"\"\"\n    Format sea encounter details for markdown.\n    \n    Args:\n        hex_data: Dictionary containing hex data\n        translation_system: Translation system instance\n        \n    Returns:\n        List of markdown lines\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/markdown_formatter.py",
        "start": 89,
        "end": 99,
        "startLoc": {
          "line": 89,
          "column": 29,
          "position": 517
        },
        "endLoc": {
          "line": 99,
          "column": 8,
          "position": 545
        }
      },
      "secondFile": {
        "name": "backend/utils/markdown_formatter.py",
        "start": 8,
        "end": 18,
        "startLoc": {
          "line": 8,
          "column": 34,
          "position": 22
        },
        "endLoc": {
          "line": 18,
          "column": 8,
          "position": 50
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n    lines.append(\"\")\n    \n    # Add common sections\n    lines.extend(format_threat_level_and_territory(hex_data, translation_system))\n    lines.extend(format_loot_section(hex_data, translation_system))\n    \n    return lines\n\n\ndef format_npc_details",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/markdown_formatter.py",
        "start": 104,
        "end": 114,
        "startLoc": {
          "line": 104,
          "column": 64,
          "position": 592
        },
        "endLoc": {
          "line": 114,
          "column": 19,
          "position": 646
        }
      },
      "secondFile": {
        "name": "backend/utils/markdown_formatter.py",
        "start": 79,
        "end": 89,
        "startLoc": {
          "line": 79,
          "column": 68,
          "position": 462
        },
        "endLoc": {
          "line": 89,
          "column": 29,
          "position": 516
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "(hex_data: Dict[str, Any], translation_system=None) -> List[str]:\n    \"\"\"\n    Format NPC details for markdown.\n    \n    Args:\n        hex_data: Dictionary containing hex data\n        translation_system: Translation system instance\n        \n    Returns:\n        List of markdown lines\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/markdown_formatter.py",
        "start": 114,
        "end": 124,
        "startLoc": {
          "line": 114,
          "column": 19,
          "position": 647
        },
        "endLoc": {
          "line": 124,
          "column": 8,
          "position": 675
        }
      },
      "secondFile": {
        "name": "backend/utils/markdown_formatter.py",
        "start": 8,
        "end": 18,
        "startLoc": {
          "line": 8,
          "column": 34,
          "position": 22
        },
        "endLoc": {
          "line": 18,
          "column": 8,
          "position": 50
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "\"affiliation\", \"basic\", \"beasts_prices\", \n    \"bestiary\", \"city_events\", \"core\", \"denizen\", \"dungeon\", \"enhanced_loot\", \n    \"items_prices\", \"items_trinkets\", \"loot\", \"npc_apocalypse\", \"npc_concerns\", \n    \"npc_names\", \"npc_secrets\", \"npc_trades\", \"npc_traits\", \"npc_wants\",\n    \"scroll\", \"services_prices\", \"stats\", \"tavern\", \"tavern_innkeeper\",\n    \"tavern_menu\", \"tavern_patrons\", \"traps_builders\", \"traps_effects\", \n    \"traps_triggers\", \"weapons_prices\", \"weather\", \"wilderness\"\n]\n\n\ndef",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/database_categories.py",
        "start": 30,
        "end": 40,
        "startLoc": {
          "line": 30,
          "column": 2,
          "position": 219
        },
        "endLoc": {
          "line": 40,
          "column": 4,
          "position": 328
        }
      },
      "secondFile": {
        "name": "backend/utils/database_categories.py",
        "start": 10,
        "end": 19,
        "startLoc": {
          "line": 10,
          "column": 5,
          "position": 48
        },
        "endLoc": {
          "line": 19,
          "column": 43,
          "position": 156
        }
      }
    },
    {
      "format": "python",
      "lines": 5,
      "fragment": "import re\nfrom typing import Dict, Any, Optional\n\n\ndef parse_content_sections(content: str) -> Dict[str, str",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/content_parser.py",
        "start": 4,
        "end": 8,
        "startLoc": {
          "line": 4,
          "column": 1,
          "position": 2
        },
        "endLoc": {
          "line": 8,
          "column": 4,
          "position": 40
        }
      },
      "secondFile": {
        "name": "backend/utils/markdown_parser.py",
        "start": 5,
        "end": 9,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 3
        },
        "endLoc": {
          "line": 9,
          "column": 4,
          "position": 41
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ", content, re.DOTALL)\n    if description_match:\n        data['description'] = description_match.group(1).strip()\n    \n    return data\n\n\ndef parse_loot_section(content: str) -> Optional[Dict[str, str]]:\n    \"\"\"\n    Parse loot section from markdown content.\n    \n    Args:\n        content: Markdown content string\n        \n    Returns:\n        Dictionary containing loot data or None if not found\n    \"\"\"\n    # Use centralized markdown parser",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/content_parser.py",
        "start": 28,
        "end": 45,
        "startLoc": {
          "line": 28,
          "column": 38,
          "position": 144
        },
        "endLoc": {
          "line": 45,
          "column": 34,
          "position": 217
        }
      },
      "secondFile": {
        "name": "backend/utils/markdown_parser.py",
        "start": 38,
        "end": 55,
        "startLoc": {
          "line": 38,
          "column": 34,
          "position": 264
        },
        "endLoc": {
          "line": 55,
          "column": 11,
          "position": 337
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "try:\n        # Use configurable path from config system\n        from backend.config import get_config\n        config = get_config()\n        hex_file_path = config.paths.output_path / \"hexes\" / f\"hex_{hex_code}.md\"\n        \n        if not hex_file_path.exists():\n            return False",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/content_detector.py",
        "start": 54,
        "end": 61,
        "startLoc": {
          "line": 54,
          "column": 5,
          "position": 232
        },
        "endLoc": {
          "line": 61,
          "column": 6,
          "position": 295
        }
      },
      "secondFile": {
        "name": "backend/utils/content_detector.py",
        "start": 19,
        "end": 26,
        "startLoc": {
          "line": 19,
          "column": 5,
          "position": 40
        },
        "endLoc": {
          "line": 26,
          "column": 5,
          "position": 103
        }
      }
    },
    {
      "format": "python",
      "lines": 5,
      "fragment": "with open(hex_file_path, 'r', encoding='utf-8') as f:\n            content = f.read()\n            \n        # Use centralized markdown parser for more robust detection\n        from backend.utils.markdown_parser import parse_loot_section",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/content_detector.py",
        "start": 63,
        "end": 67,
        "startLoc": {
          "line": 63,
          "column": 9,
          "position": 300
        },
        "endLoc": {
          "line": 67,
          "column": 19,
          "position": 347
        }
      },
      "secondFile": {
        "name": "backend/utils/content_detector.py",
        "start": 28,
        "end": 32,
        "startLoc": {
          "line": 28,
          "column": 9,
          "position": 108
        },
        "endLoc": {
          "line": 32,
          "column": 19,
          "position": 155
        }
      }
    },
    {
      "format": "python",
      "lines": 3,
      "fragment": ",\n        'population': city_data.get('population', 'Unknown'),\n        'region': city_data.get('region', 'central'",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/city_processor.py",
        "start": 30,
        "end": 32,
        "startLoc": {
          "line": 30,
          "column": 12,
          "position": 170
        },
        "endLoc": {
          "line": 32,
          "column": 10,
          "position": 198
        }
      },
      "secondFile": {
        "name": "backend/utils/settlement_data_creator.py",
        "start": 58,
        "end": 60,
        "startLoc": {
          "line": 58,
          "column": 2,
          "position": 367
        },
        "endLoc": {
          "line": 60,
          "column": 10,
          "position": 395
        }
      }
    },
    {
      "format": "python",
      "lines": 5,
      "fragment": "beast_type = beast_data.get('beast_type', 'Unknown beast')\n    feature = beast_data.get('beast_feature', 'mysterious appearance')\n    behavior = beast_data.get('beast_behavior', 'hunts in the area')\n    \n    lines",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/beast_generator.py",
        "start": 73,
        "end": 77,
        "startLoc": {
          "line": 73,
          "column": 5,
          "position": 430
        },
        "endLoc": {
          "line": 77,
          "column": 6,
          "position": 477
        }
      },
      "secondFile": {
        "name": "backend/utils/beast_generator.py",
        "start": 55,
        "end": 59,
        "startLoc": {
          "line": 55,
          "column": 5,
          "position": 344
        },
        "endLoc": {
          "line": 59,
          "column": 7,
          "position": 391
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "if current_section and section_content:\n        section_text = '\\n'.join(section_content).strip()\n        if current_section in data:\n            if current_section == 'tavern_details':\n                # Don't overwrite tavern_details with string content\n                pass\n            else:\n                data[current_section] = section_text\n    \n    return",
      "tokens": 0,
      "firstFile": {
        "name": "backend/utils/ascii_processor.py",
        "start": 85,
        "end": 94,
        "startLoc": {
          "line": 85,
          "column": 5,
          "position": 510
        },
        "endLoc": {
          "line": 94,
          "column": 7,
          "position": 578
        }
      },
      "secondFile": {
        "name": "backend/utils/ascii_processor.py",
        "start": 58,
        "end": 66,
        "startLoc": {
          "line": 58,
          "column": 13,
          "position": 310
        },
        "endLoc": {
          "line": 66,
          "column": 16,
          "position": 376
        }
      }
    },
    {
      "format": "python",
      "lines": 4,
      "fragment": "for x in range(1, self.map_width + 1):\n            for y in range(1, self.map_height + 1):\n                hex_code = f\"{x:02d}{y:02d}\"\n                overview",
      "tokens": 0,
      "firstFile": {
        "name": "backend/terrain_system.py",
        "start": 194,
        "end": 197,
        "startLoc": {
          "line": 194,
          "column": 9,
          "position": 1711
        },
        "endLoc": {
          "line": 197,
          "column": 9,
          "position": 1763
        }
      },
      "secondFile": {
        "name": "backend/terrain_system.py",
        "start": 113,
        "end": 116,
        "startLoc": {
          "line": 113,
          "column": 9,
          "position": 909
        },
        "endLoc": {
          "line": 116,
          "column": 10,
          "position": 961
        }
      }
    },
    {
      "format": "python",
      "lines": 5,
      "fragment": "}\n        for x in range(1, self.map_width + 1):\n            for y in range(1, self.map_height + 1):\n                hex_code = f\"{x:02d}{y:02d}\"\n                terrain",
      "tokens": 0,
      "firstFile": {
        "name": "backend/terrain_system.py",
        "start": 201,
        "end": 205,
        "startLoc": {
          "line": 201,
          "column": 14,
          "position": 1824
        },
        "endLoc": {
          "line": 205,
          "column": 8,
          "position": 1879
        }
      },
      "secondFile": {
        "name": "backend/terrain_system.py",
        "start": 193,
        "end": 116,
        "startLoc": {
          "line": 193,
          "column": 2,
          "position": 1708
        },
        "endLoc": {
          "line": 116,
          "column": 10,
          "position": 961
        }
      }
    },
    {
      "format": "python",
      "lines": 4,
      "fragment": ".get_hardcoded_hex(hex_code)\n        if hardcoded and hardcoded.get('type') == 'major_city':\n            city_key = hardcoded['city_key']\n            return",
      "tokens": 0,
      "firstFile": {
        "name": "backend/mork_borg_lore_database.py",
        "start": 691,
        "end": 694,
        "startLoc": {
          "line": 691,
          "column": 5,
          "position": 3338
        },
        "endLoc": {
          "line": 694,
          "column": 7,
          "position": 3374
        }
      },
      "secondFile": {
        "name": "backend/utils/grid_generator.py",
        "start": 45,
        "end": 48,
        "startLoc": {
          "line": 45,
          "column": 8,
          "position": 207
        },
        "endLoc": {
          "line": 48,
          "column": 10,
          "position": 243
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n            self.terrain_cache[hex_code] = terrain\n            return terrain\n        except Exception as e:\n            if self.debug:\n                print(f\"⚠️  Error analyzing hex {hex_code}: {e}\"",
      "tokens": 0,
      "firstFile": {
        "name": "backend/image_analyzer.py",
        "start": 89,
        "end": 94,
        "startLoc": {
          "line": 89,
          "column": 9,
          "position": 1214
        },
        "endLoc": {
          "line": 94,
          "column": 42,
          "position": 1255
        }
      },
      "secondFile": {
        "name": "backend/terrain_system.py",
        "start": 92,
        "end": 97,
        "startLoc": {
          "line": 92,
          "column": 50,
          "position": 726
        },
        "endLoc": {
          "line": 97,
          "column": 60,
          "position": 767
        }
      }
    },
    {
      "format": "python",
      "lines": 5,
      "fragment": ":\n                raise ValueError(f\"Invalid hex code format: {hex_code}\")\n            x = int(hex_code[:2])\n            y = int(hex_code[2:])\n            if",
      "tokens": 0,
      "firstFile": {
        "name": "backend/image_analyzer.py",
        "start": 98,
        "end": 102,
        "startLoc": {
          "line": 98,
          "column": 2,
          "position": 1302
        },
        "endLoc": {
          "line": 102,
          "column": 3,
          "position": 1342
        }
      },
      "secondFile": {
        "name": "backend/utils.py",
        "start": 32,
        "end": 36,
        "startLoc": {
          "line": 32,
          "column": 2,
          "position": 224
        },
        "endLoc": {
          "line": 36,
          "column": 7,
          "position": 264
        }
      }
    },
    {
      "format": "python",
      "lines": 3,
      "fragment": "img_width, img_height = self.map_image.size\n        grid_width, grid_height = self.map_width, self.map_height\n        scale",
      "tokens": 0,
      "firstFile": {
        "name": "backend/image_analyzer.py",
        "start": 145,
        "end": 147,
        "startLoc": {
          "line": 145,
          "column": 9,
          "position": 2062
        },
        "endLoc": {
          "line": 147,
          "column": 6,
          "position": 2093
        }
      },
      "secondFile": {
        "name": "backend/image_analyzer.py",
        "start": 107,
        "end": 109,
        "startLoc": {
          "line": 107,
          "column": 9,
          "position": 1434
        },
        "endLoc": {
          "line": 109,
          "column": 3,
          "position": 1465
        }
      }
    },
    {
      "format": "python",
      "lines": 4,
      "fragment": "scale = min(img_width / grid_width, img_height / grid_height)\n        scaled_width = grid_width * scale\n        scaled_height = grid_height * scale\n        x_offset = int",
      "tokens": 0,
      "firstFile": {
        "name": "backend/image_analyzer.py",
        "start": 147,
        "end": 150,
        "startLoc": {
          "line": 147,
          "column": 9,
          "position": 2093
        },
        "endLoc": {
          "line": 150,
          "column": 4,
          "position": 2140
        }
      },
      "secondFile": {
        "name": "backend/image_analyzer.py",
        "start": 110,
        "end": 113,
        "startLoc": {
          "line": 110,
          "column": 13,
          "position": 1477
        },
        "endLoc": {
          "line": 113,
          "column": 2,
          "position": 1524
        }
      }
    },
    {
      "format": "python",
      "lines": 4,
      "fragment": ":\n                    color = self.map_image.getpixel((x, y))\n                    if isinstance(color, tuple) and len(color) >= 3:\n                        colors",
      "tokens": 0,
      "firstFile": {
        "name": "backend/image_analyzer.py",
        "start": 180,
        "end": 183,
        "startLoc": {
          "line": 180,
          "column": 4,
          "position": 2697
        },
        "endLoc": {
          "line": 183,
          "column": 7,
          "position": 2742
        }
      },
      "secondFile": {
        "name": "backend/image_analyzer.py",
        "start": 160,
        "end": 163,
        "startLoc": {
          "line": 160,
          "column": 11,
          "position": 2326
        },
        "endLoc": {
          "line": 163,
          "column": 7,
          "position": 2371
        }
      }
    },
    {
      "format": "python",
      "lines": 4,
      "fragment": ".getpixel((x, y))\n                if isinstance(color, tuple) and len(color) >= 3:\n                    pixels.append(color[:3])\n        counter",
      "tokens": 0,
      "firstFile": {
        "name": "backend/image_analyzer.py",
        "start": 249,
        "end": 252,
        "startLoc": {
          "line": 249,
          "column": 4,
          "position": 3546
        },
        "endLoc": {
          "line": 252,
          "column": 8,
          "position": 3593
        }
      },
      "secondFile": {
        "name": "backend/image_analyzer.py",
        "start": 161,
        "end": 164,
        "startLoc": {
          "line": 161,
          "column": 10,
          "position": 2336
        },
        "endLoc": {
          "line": 164,
          "column": 3,
          "position": 2383
        }
      }
    },
    {
      "format": "python",
      "lines": 5,
      "fragment": "] = None\n    exists: bool = True\n    \n    def get_hex_type(self) -> HexType:\n        return HexType.NPC",
      "tokens": 0,
      "firstFile": {
        "name": "backend/hex_model.py",
        "start": 219,
        "end": 223,
        "startLoc": {
          "line": 219,
          "column": 9,
          "position": 1538
        },
        "endLoc": {
          "line": 223,
          "column": 4,
          "position": 1575
        }
      },
      "secondFile": {
        "name": "backend/hex_model.py",
        "start": 135,
        "end": 139,
        "startLoc": {
          "line": 135,
          "column": 2,
          "position": 874
        },
        "endLoc": {
          "line": 139,
          "column": 8,
          "position": 911
        }
      }
    },
    {
      "format": "python",
      "lines": 5,
      "fragment": ",\n            \"notable_feature\": self.notable_feature,\n            \"atmosphere\": self.atmosphere,\n            \"loot\": self.loot.to_dict() if self.loot else None,\n            # Additional NPC fields",
      "tokens": 0,
      "firstFile": {
        "name": "backend/hex_model.py",
        "start": 240,
        "end": 244,
        "startLoc": {
          "line": 240,
          "column": 9,
          "position": 1714
        },
        "endLoc": {
          "line": 244,
          "column": 24,
          "position": 1758
        }
      },
      "secondFile": {
        "name": "backend/hex_model.py",
        "start": 188,
        "end": 192,
        "startLoc": {
          "line": 188,
          "column": 13,
          "position": 1303
        },
        "endLoc": {
          "line": 192,
          "column": 24,
          "position": 1347
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ": str\n    denizen: str\n    territory: str\n    threat_level: str\n    notable_feature: str\n    atmosphere: str\n    loot: Optional[LootItem] = None\n    # Sea encounter specific fields",
      "tokens": 0,
      "firstFile": {
        "name": "backend/hex_model.py",
        "start": 254,
        "end": 261,
        "startLoc": {
          "line": 254,
          "column": 15,
          "position": 1803
        },
        "endLoc": {
          "line": 261,
          "column": 32,
          "position": 1851
        }
      },
      "secondFile": {
        "name": "backend/hex_model.py",
        "start": 164,
        "end": 171,
        "startLoc": {
          "line": 164,
          "column": 15,
          "position": 1105
        },
        "endLoc": {
          "line": 171,
          "column": 24,
          "position": 1153
        }
      }
    },
    {
      "format": "python",
      "lines": 5,
      "fragment": ": str = \"\"\n    exists: bool = True\n    \n    def get_hex_type(self) -> HexType:\n        return HexType.SEA_ENCOUNTER",
      "tokens": 0,
      "firstFile": {
        "name": "backend/hex_model.py",
        "start": 263,
        "end": 267,
        "startLoc": {
          "line": 263,
          "column": 16,
          "position": 1865
        },
        "endLoc": {
          "line": 267,
          "column": 14,
          "position": 1904
        }
      },
      "secondFile": {
        "name": "backend/hex_model.py",
        "start": 173,
        "end": 177,
        "startLoc": {
          "line": 173,
          "column": 10,
          "position": 1167
        },
        "endLoc": {
          "line": 177,
          "column": 6,
          "position": 1206
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ",\n            \"denizen\": self.denizen,\n            \"territory\": self.territory,\n            \"threat_level\": self.threat_level,\n            \"notable_feature\": self.notable_feature,\n            \"atmosphere\": self.atmosphere,\n            \"loot\": self.loot.to_dict() if self.loot else None,\n            # Sea encounter specific fields",
      "tokens": 0,
      "firstFile": {
        "name": "backend/hex_model.py",
        "start": 273,
        "end": 280,
        "startLoc": {
          "line": 273,
          "column": 15,
          "position": 1956
        },
        "endLoc": {
          "line": 280,
          "column": 32,
          "position": 2027
        }
      },
      "secondFile": {
        "name": "backend/hex_model.py",
        "start": 185,
        "end": 192,
        "startLoc": {
          "line": 185,
          "column": 15,
          "position": 1276
        },
        "endLoc": {
          "line": 192,
          "column": 24,
          "position": 1347
        }
      }
    },
    {
      "format": "python",
      "lines": 4,
      "fragment": "terrain = context.get('terrain', 'unknown')\n        language = context.get('language', 'en')\n        \n        # Use centralized beast generator",
      "tokens": 0,
      "firstFile": {
        "name": "backend/generation_engine.py",
        "start": 262,
        "end": 265,
        "startLoc": {
          "line": 262,
          "column": 9,
          "position": 1824
        },
        "endLoc": {
          "line": 265,
          "column": 34,
          "position": 1856
        }
      },
      "secondFile": {
        "name": "backend/generation_engine.py",
        "start": 174,
        "end": 177,
        "startLoc": {
          "line": 174,
          "column": 9,
          "position": 1001
        },
        "endLoc": {
          "line": 177,
          "column": 31,
          "position": 1033
        }
      }
    },
    {
      "format": "python",
      "lines": 3,
      "fragment": "terrain = context.get('terrain', 'unknown')\n        language = context.get('language', 'en')\n        hex_code",
      "tokens": 0,
      "firstFile": {
        "name": "backend/generation_engine.py",
        "start": 282,
        "end": 284,
        "startLoc": {
          "line": 282,
          "column": 9,
          "position": 1993
        },
        "endLoc": {
          "line": 284,
          "column": 9,
          "position": 2023
        }
      },
      "secondFile": {
        "name": "backend/generation_engine.py",
        "start": 174,
        "end": 177,
        "startLoc": {
          "line": 174,
          "column": 9,
          "position": 1001
        },
        "endLoc": {
          "line": 177,
          "column": 31,
          "position": 1033
        }
      }
    },
    {
      "format": "python",
      "lines": 4,
      "fragment": "db_manager.get_table('weather', 'weather_conditions', language) or []\n        return random.choice(weather_conditions) if weather_conditions else \"Lifeless grey\"\n    \n    def _generate_city_event",
      "tokens": 0,
      "firstFile": {
        "name": "backend/generation_engine.py",
        "start": 427,
        "end": 430,
        "startLoc": {
          "line": 427,
          "column": 2,
          "position": 3394
        },
        "endLoc": {
          "line": 430,
          "column": 21,
          "position": 3435
        }
      },
      "secondFile": {
        "name": "backend/utils/tavern_generator.py",
        "start": 51,
        "end": 55,
        "startLoc": {
          "line": 51,
          "column": 2,
          "position": 342
        },
        "endLoc": {
          "line": 55,
          "column": 20,
          "position": 382
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "with open(filepath, 'r', encoding='utf-8') as f:\n                    data = json.load(f)\n                    category = filename.replace('.json', '')\n                    tables[f\"{category}_tables\"] = data.get('tables', {})\n        \n        return tables\n    \n    def _load_content_tables",
      "tokens": 0,
      "firstFile": {
        "name": "backend/database_manager.py",
        "start": 85,
        "end": 92,
        "startLoc": {
          "line": 85,
          "column": 17,
          "position": 666
        },
        "endLoc": {
          "line": 92,
          "column": 21,
          "position": 745
        }
      },
      "secondFile": {
        "name": "backend/database_manager.py",
        "start": 68,
        "end": 75,
        "startLoc": {
          "line": 68,
          "column": 17,
          "position": 498
        },
        "endLoc": {
          "line": 75,
          "column": 18,
          "position": 577
        }
      }
    },
    {
      "format": "python",
      "lines": 3,
      "fragment": "if os.path.exists(filepath):\n            with open(filepath, 'r', encoding='utf-8') as f:\n                file_data",
      "tokens": 0,
      "firstFile": {
        "name": "backend/database_manager.py",
        "start": 142,
        "end": 144,
        "startLoc": {
          "line": 142,
          "column": 9,
          "position": 1265
        },
        "endLoc": {
          "line": 144,
          "column": 10,
          "position": 1299
        }
      },
      "secondFile": {
        "name": "backend/database_manager.py",
        "start": 84,
        "end": 86,
        "startLoc": {
          "line": 84,
          "column": 13,
          "position": 653
        },
        "endLoc": {
          "line": 86,
          "column": 5,
          "position": 687
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": "all_data = {}\n            for lang in ['en', 'pt']:\n                all_data[lang] = self.load_tables(lang)\n            \n            with open(output_path, 'w', encoding='utf-8') as f:\n                yaml",
      "tokens": 0,
      "firstFile": {
        "name": "backend/database_manager.py",
        "start": 194,
        "end": 199,
        "startLoc": {
          "line": 194,
          "column": 13,
          "position": 1738
        },
        "endLoc": {
          "line": 199,
          "column": 5,
          "position": 1799
        }
      },
      "secondFile": {
        "name": "backend/database_manager.py",
        "start": 185,
        "end": 190,
        "startLoc": {
          "line": 185,
          "column": 13,
          "position": 1639
        },
        "endLoc": {
          "line": 190,
          "column": 5,
          "position": 1700
        }
      }
    },
    {
      "format": "python",
      "lines": 4,
      "fragment": "for root, dirs, files in os.walk(self.database_path):\n            for file in files:\n                if file.endswith('.json'):\n                    filepath",
      "tokens": 0,
      "firstFile": {
        "name": "backend/database_manager.py",
        "start": 308,
        "end": 311,
        "startLoc": {
          "line": 308,
          "column": 9,
          "position": 2841
        },
        "endLoc": {
          "line": 311,
          "column": 9,
          "position": 2885
        }
      },
      "secondFile": {
        "name": "backend/database_manager.py",
        "start": 251,
        "end": 254,
        "startLoc": {
          "line": 251,
          "column": 9,
          "position": 2313
        },
        "endLoc": {
          "line": 254,
          "column": 9,
          "position": 2357
        }
      }
    },
    {
      "format": "python",
      "lines": 5,
      "fragment": ":\n                        with open(filepath, 'r', encoding='utf-8') as f:\n                            data = json.load(f)\n                            \n                        # Check for required fields",
      "tokens": 0,
      "firstFile": {
        "name": "backend/database_manager.py",
        "start": 314,
        "end": 318,
        "startLoc": {
          "line": 314,
          "column": 4,
          "position": 2918
        },
        "endLoc": {
          "line": 318,
          "column": 28,
          "position": 2956
        }
      },
      "secondFile": {
        "name": "backend/database_manager.py",
        "start": 84,
        "end": 70,
        "startLoc": {
          "line": 84,
          "column": 2,
          "position": 663
        },
        "endLoc": {
          "line": 70,
          "column": 9,
          "position": 531
        }
      }
    }
  ]
}